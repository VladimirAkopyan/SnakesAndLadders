/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package snakesladders;

import java.awt.Color;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicIntegerArray;
import java.util.concurrent.atomic.AtomicLongArray;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author Maxsim Goratiev
 */
public class SnakesLaddersGUI extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form SnakesLaddersGUI
     */
    public static ExecutorService ThreadPool;
    private ImageIcon staticDie=new ImageIcon("roll.png");
    private ImageIcon animDie=new ImageIcon("roll.gif");
    private Network Network;
    private int server, myID;/*0 for not a server. 1 for server waiting to start game, 2 for server taht has started game*/
    /**
     *this is location of all players
     */
    public static volatile AtomicIntegerArray player_locations= new AtomicIntegerArray(5);
    
    /**
     *
     * @param args
     */
    public static void main (String [] args){
        ThreadPool= Executors.newFixedThreadPool(7);
        SnakesLaddersGUI gui= new SnakesLaddersGUI();
        gui.run();
    }

    /**
     *constructor
     */
    public SnakesLaddersGUI (){

        for(int i=0;i<5;i++)
            player_locations.set(i, 0);
        this.initComponents();
        this.setTitle("Snakes And Ladders");
        this.getContentPane().setBackground((new java.awt.Color(237, 237, 243)));

    }

    /*
     * This Method makes name and ip fields un-editable.
     * It creates a first playerArray with the name user entered
     */
private void gameSetup (int m, String n, int par1){
        jConnect.setEnabled(false);
        jHost.setEnabled(false);
        jIPfield.setEditable(false);
        jPName.setEditable(false);
        jIPfield.setBackground(new java.awt.Color(230, 230, 230));
        jPName.setBackground(new java.awt.Color(230, 230, 230));
        
}

public void gameReset (){
        jConnect.setEnabled(true);
        jHost.setEnabled(true);
        jIPfield.setEditable(true);
        jPName.setEditable(true);
        jIPfield.setBackground(new java.awt.Color(255,255,255));
        jPName.setBackground(new java.awt.Color(255,255,255));
        jConnect.setText("Connect");
        jHost.setText("Host");
        Network=null;
        server=0;
}
   

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jConnect = new javax.swing.JButton();
        jPName = new javax.swing.JTextField();
        boardPanel = new BoardJpanel();
        roll = new javax.swing.JButton();
        roll.setEnabled(false);
        jIpLabel = new javax.swing.JLabel();
        jIPfield = new javax.swing.JTextField();
        ImageIcon staticDie=new ImageIcon("roll.png");
        ImageIcon animDie=new ImageIcon("roll.gif");
        jDieDisplay = new javax.swing.JLabel();
        jDieDisplay.setIcon(staticDie);
        jHost = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPlayerDisplay = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jFeedback = new javax.swing.JTextArea();
        sendChat = new javax.swing.JButton();
        sendChat.setEnabled(false);
        jChat = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(153, 153, 255));
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(2400, 1920));
        setMinimumSize(new java.awt.Dimension(800, 580));
        setName("GameFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 580));

        jConnect.setBackground(new java.awt.Color(204, 204, 204));
        jConnect.setText("Connect");
        jConnect.setToolTipText("Attept to connect to game at spesified adress");
        jConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConnectActionPerformed(evt);
            }
        });

        jPName.setColumns(1);
        jPName.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jPName.setText("Player 1");
        jPName.setToolTipText("Identify yourself to other players");
        jPName.setDoubleBuffered(true);
        jPName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPNameActionPerformed(evt);
            }
        });

        boardPanel.setBackground(new java.awt.Color(153, 255, 153));
        boardPanel.setToolTipText("");
        boardPanel.setMaximumSize(new java.awt.Dimension(2000, 2000));
        boardPanel.setMinimumSize(new java.awt.Dimension(387, 388));
        boardPanel.setName("boardPanel"); // NOI18N

        javax.swing.GroupLayout boardPanelLayout = new javax.swing.GroupLayout(boardPanel);
        boardPanel.setLayout(boardPanelLayout);
        boardPanelLayout.setHorizontalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 552, Short.MAX_VALUE)
        );
        boardPanelLayout.setVerticalGroup(
            boardPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        roll.setBackground(new java.awt.Color(223, 226, 232));
        roll.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        roll.setText("Roll the die!");
        roll.setActionCommand("roll");
        roll.setDoubleBuffered(true);
        roll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollActionPerformed(evt);
            }
        });

        jIpLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jIpLabel.setText("Ip adress:");
        jIpLabel.setDoubleBuffered(true);
        jIpLabel.setRequestFocusEnabled(false);

        jIPfield.setColumns(1);
        jIPfield.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jIPfield.setText("127.0.0.1");
        jIPfield.setToolTipText("localhost is default,");
        jIPfield.setDoubleBuffered(true);
        jIPfield.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIPfieldActionPerformed(evt);
            }
        });

        jHost.setText("Host");
        jHost.setToolTipText("Host Your own game!");
        jHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jHostActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Player Name:");
        jLabel2.setDoubleBuffered(true);
        jLabel2.setFocusable(false);
        jLabel2.setInheritsPopupMenu(false);
        jLabel2.setRequestFocusEnabled(false);
        jLabel2.setVerifyInputWhenFocusTarget(false);

        jPlayerDisplay.setEditable(false);
        jPlayerDisplay.setBackground(new java.awt.Color(237, 237, 243));
        jPlayerDisplay.setColumns(5);
        jPlayerDisplay.setRows(5);
        jPlayerDisplay.setAutoscrolls(false);
        jPlayerDisplay.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jPlayerDisplay.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jPlayerDisplay.setFocusable(false);
        jPlayerDisplay.setHighlighter(null);
        jPlayerDisplay.setMaximumSize(new java.awt.Dimension(40, 90));
        jPlayerDisplay.setMinimumSize(new java.awt.Dimension(40, 90));
        jPlayerDisplay.setRequestFocusEnabled(false);
        jPlayerDisplay.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jPlayerDisplay);

        jFeedback.setEditable(false);
        jFeedback.setBackground(new java.awt.Color(240, 240, 240));
        jFeedback.setColumns(20);
        jFeedback.setLineWrap(true);
        jFeedback.setRows(5);
        jFeedback.setTabSize(6);
        jFeedback.setToolTipText("This windows tells you what is happening");
        jFeedback.setFocusable(false);
        jFeedback.setRequestFocusEnabled(false);
        jFeedback.setVerifyInputWhenFocusTarget(false);
        jScrollPane4.setViewportView(jFeedback);

        sendChat.setText("Send");
        sendChat.setToolTipText("Send a chat message to other players");
        sendChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendChatActionPerformed(evt);
            }
        });

        jChat.setText("Chat here!");
        jChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jChatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jIpLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jIPfield, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPName, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(roll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDieDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jHost, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jConnect, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE)
                        .addComponent(sendChat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jChat))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jIPfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jIpLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jConnect)
                            .addComponent(jHost))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(roll, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDieDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jChat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sendChat)
                        .addContainerGap())
                    .addComponent(boardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPName.getAccessibleContext().setAccessibleName("");
        boardPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConnectActionPerformed
        // TODO add your handling code here:
        gameSetup(1,jPName.getText(),1);
        jConnect.setText("Connecting...");
        InetAddress connect_to=null;
        try {
             connect_to=InetAddress.getByName(jIPfield.getText());
        } catch (UnknownHostException ex) {
            print("Your IP adress is messed up");
        }
        
        try {
            Network= new Network(this, jPName.getText(),connect_to);
            jFeedback.append("Attempting to connect to server...");
        } catch (Exception ex) {
            jFeedback.append("\n Your IP adress is Invalid");
            gameReset();
        }
        server=0;
    }//GEN-LAST:event_jConnectActionPerformed

    private void jPNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPNameActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jPNameActionPerformed

    private void rollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollActionPerformed
       // TODO add your handling code here:
        /*These tlines of code hangle the dice Animation, Status of the animation is flushed and then assigned again to the 
         * icon for display
         */
        if(server==1){
            server++;
            roll.setText("Roll the die");
            Network.send_playerList();
        }
        else{  
            char rollCom= (int)2;
            jDieDisplay.setIcon(staticDie);
            animDie.getImage().flush();
            jDieDisplay.setIcon(animDie);
            roll.setEnabled(false);
            char rolled=(char)(int)(Math.random()*5+1);
            char id= (char)myID;
            Network.send_message(rollCom + "" +rolled+ ""+ id);
            if(server>1)
                print(jPName.getText() +" " + BoardJpanel.move_player(0, rolled));
        }
        
    }//GEN-LAST:event_rollActionPerformed

    private void jIPfieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIPfieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jIPfieldActionPerformed

    /*
     * This method is activated on "Host" button press. It calls gameSetup, c
     * hagnes text on the button, and replaces text in the text field
     * with IP adress of the host
     */
    private void jHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jHostActionPerformed
        // TODO add your handling code here:
        gameSetup(1,jPName.getText(),1);
        jHost.setText("Hosting...");
        try {
             jIPfield.setText(InetAddress.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            jHost.setText("Can't get your IP adress, do you have a network adapter?");
        }
        Network = new Network(this, jPName.getText());
        roll.setEnabled(true);
        roll.setText("Start Game");
        server=1;
    }//GEN-LAST:event_jHostActionPerformed

    /*this function sends a char message to a remote server, by calling 
     * Network.send. Client or server implementation is handled by abstraction
     * Text is also cleared from chat. it will be appended to the jChar box if 
     * the message reaches server and is echoed back. 
     *@param evt is a button click event*/
    private void sendChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendChatActionPerformed
        char chat=(int)1;
        Network.send_message(chat+jChat.getText());
        jChat.setText("");
    }//GEN-LAST:event_sendChatActionPerformed

    private void jChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jChatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jChatActionPerformed

    /**
     * @param args the command line arguments
     */
    @Override
    public void run() {
                create();
     }
    
    public void setPlayer_list(String[] Player_list, int id, int NofPlayers) {
                myID=id;
                jPlayerDisplay.append(Player_list[0]);
                for(int i =1; i<NofPlayers;i++)
                    jPlayerDisplay.append("\n" +Player_list[i]);
     }
    
    public void I_am_rolling() {
                roll.setEnabled(true);
     }
    
    public void enable_game(boolean setting) {
                sendChat.setEnabled(setting);
     }
     
     public synchronized void print(String message) {
                jFeedback.append("\n"+ message);
     }
     
     public synchronized void begin_game(String message) {
            roll.setEnabled(true);
            roll.setText("Start Game");
     }

    
    public synchronized void create() {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SnakesLaddersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SnakesLaddersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SnakesLaddersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SnakesLaddersGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public synchronized void run() {
                new SnakesLaddersGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boardPanel;
    private javax.swing.JTextField jChat;
    private javax.swing.JButton jConnect;
    private javax.swing.JLabel jDieDisplay;
    private javax.swing.JTextArea jFeedback;
    private javax.swing.JButton jHost;
    private javax.swing.JTextField jIPfield;
    private javax.swing.JLabel jIpLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jPName;
    private javax.swing.JTextArea jPlayerDisplay;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton roll;
    private javax.swing.JButton sendChat;
    // End of variables declaration//GEN-END:variables
}
